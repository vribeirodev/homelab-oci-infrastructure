name: 'Terraform Plan'

on:
  pull_request:
    paths:
      - 'environments/**/*.tf'
      - 'modules/**/*.tf'
      - 'environments/**/*.tfvars.example'

env:
  TF_VERSION: '1.6.0'

jobs:
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [production, staging]

    defaults:
      run:
        working-directory: environments/${{ matrix.environment }}/terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Create dummy tfvars for plan
        run: |
          cat > terraform.tfvars << EOF
          compartment_id = "ocid1.compartment.oc1..dummy-for-plan"
          ssh_public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC dummy-key-for-plan"
          region = "us-ashburn-1"
          cluster_name = "homelab-plan"
          kubernetes_version = "v1.33.1"
          EOF

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan 2>&1 | tee plan_output.txt
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          cat plan_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Encontrar comentÃ¡rio existente
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('## Terraform Plan (${{ matrix.environment }})')
            );
            
            const planOutput = `${{ steps.plan.outputs.plan_output }}`;
            const truncatedOutput = planOutput.length > 60000 
              ? planOutput.substring(0, 60000) + '\n\n... (output truncated)'
              : planOutput;
            
            const commentBody = `## Terraform Plan (${{ matrix.environment }})
            
            **Status:** ${{ steps.plan.outcome }}
            
            <details>
            <summary>Show Plan</summary>
            
            \`\`\`hcl
            ${truncatedOutput}
            \`\`\`
            
            </details>
            
            > Plan generated for commit ${{ github.sha }}
            `;
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: Update PR status
        if: steps.plan.outcome == 'failure'
        run: |
          echo "Terraform plan failed for ${{ matrix.environment }}"
          exit 1
